{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"abm-tools","text":"<p>Provides the SEDRA 3 source files and the Python based tools to generate Aramaic bible software modules in common formats... for example SWORD, MySWORD, E-SWORD modules. Rather than just providing the generated modules (which I'm hoping will be available from the normal module sites), I'd like to share the scripts used to generate them. That way if someone finds, as I have, that their preferred bible software doesn't have a module available... then you can use these scripts as a starting point to generate one.</p> <p>None of this would be possible without the source documents generously provided free to use for all. These scripts are therefore also provided under the same Apache 2.0 licence, as I've done very little work on top of the many years of time and effort various people have spent compiling the original information.</p> <p>\"freely ye have received, freely give.\" (Mat 10:8)</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>abm-tools</li> <li>Table of Contents</li> <li>Installing<ul> <li>Clone the repository</li> <li>From package</li> </ul> </li> <li>Usage</li> <li>Why produce Aramaic bible modules</li> <li>Source documents</li> <li>Available Bible Modules</li> </ul>"},{"location":"#installing","title":"Installing","text":"<p>You will need a version of Python 3 installed to run these scripts. At the moment I've not got access to pypi due to an issue with 2FA and a misshap with my phone a few months back. However the plan is to release a package on pypi to make it easier to install. For the moment however installing from source is the only option.</p>"},{"location":"#clone-the-repository","title":"Clone the repository","text":"<p>First clone the repository from github.</p> <pre><code>git clone git@github.com:machshev/aramaic-bible-modules.git\ncd aramaic-bible-modules\n</code></pre> <p>Install pdm, the \"modern python packaging and dependency manager\", this allows us to install the versions pinned in the lockfile for consistent result. We use <code>pdm</code> to manage dependencies as well as create a virtual environment to run the scripts from with all the required dependencies.</p> <pre><code>pip install pipx\npipx install pdm\npdm install\n</code></pre>"},{"location":"#from-package","title":"From package","text":"<p>Note: Not available right now.</p> <p>With <code>pip</code>:</p> <pre><code>pip install abm-tools\n</code></pre> <p>With <code>pipx</code>:</p> <pre><code>python3.8 -m pip install --user pipx\npipx install abm-tools\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>NOTE: This is still a work in progress. nothing useful is garunteed to come of running this script yet ;)</p> <p>Currently this will print out to the screen a list of entries parsed from the SEDRA DB files. As development progresses, you will find various bible modules generated and some helpful flags for configuration.</p> <pre><code>python -m abm_tools SEDRA/BFBS.TXT\n</code></pre> <p>This project is still early stages. However it's possible to generate some \"modules\"... right now that is just a Markdown or HTML export of the whole of the Peshitta. It's possible to select the alphabet used for this, SEDRA3 uses latin characters in place of the Syriac characters. These Latin characters are transformed to Unicode, and optionally either Syriac or Hebrew. The mappings seem to be correct as manually verified for the first few verses of Matthew, however I wouldn't be supprised if there were pointing marks that are not correct and those will be corrected over time with more manual checking.</p> <p>There is a Makefile that will auto generate the full set of available modules, and alphabet combinations. The output is generated in the <code>output</code> directory.</p> <pre><code>make\n</code></pre> <p>For the moment the cli tool arguments are not stable, so please use the help provided <code>abm_tools -h</code> as well as the examples in the Makefile to see the latest syntax.</p> <p>NOTE: This is still a work in progress. nothing useful is garunteed to come of running this script yet ;)</p>"},{"location":"#why-produce-aramaic-bible-modules","title":"Why produce Aramaic bible modules","text":"<p>This is the reason that I personally want free access to good quality Peshitta texts linked to a good quality Aramaic lexicon. It will allow me to study the NT in Aramaic in the same way I can the OT Hebrew and NT Greek texts.</p> <p>It's clear that Jesus spoke Aramaic, and that the whole eastern region at the time used one form of Aramaic or another. Josephus describes Greek and a foreign and an unknown tongue, showing that Greek was not widely known or understood by the Jews in the land of Israel at the time of Jesus. Hellenistic forces were actively and passionately fought against.</p> <p>Examples of Aramaic used at the time are Talmudic Aramaic, and Galilean Aramaic. There are verses in the NT Greek texts that preserve Aramaic speech, for example \"Talitha cum\" (Mark 5:41) and \"Eli Eli Lema Sabachthani\" (Matt 27:46) amongst others. Suggesting that Jesus taught using Aramaic.</p> <p>We also know that while Jesus' disciples were centred in the Galilee throughout his ministry, and then in Jerusalem immediately after his death and resurrection. The Syrian capital Antioch was the first place the disciples were called Christians.</p> <p>Acts 11:26 And when he had found him, he brought him unto Antioch. And it came to pass, that a whole year they assembled themselves with the church, and taught much people. And the disciples were called Christians first in Antioch.</p> <p>Antioch was a Greek city founded by Seleucus one of the four generals of Alexander the Great. It contained a large Jewish population and one of the centres of Hellenistic Judaism in the region. As such it was the perfect location for both the Greek and Aramaic texts of the NT to originate... Greek for the West and Aramaic for the East.</p> <p>This is not the place to try and persuade people that Aramaic or Greek texts are the \"original\". I suspect the truth is a little more complicated, and both were divinely arranged to come about (inspired). Both to make the gospel available in the main language of the East and the West.</p> <p>From my experience so far, when it comes to English translations of both texts there is little difference and certainly no major doctrinal differences. However translation is never perfect, it's simply not possible to translate the richness of some languages into others... capturing all the cultural subtleties and plays on words. For those who can, I'd recommend learning to read the original languages.</p> <p>So what's the value of the Peshitta? It may not be the same dialect as the original Aramaic spoken by Jesus and his disciples, however it's still Aramaic and more capable of capturing the subtleties of the Hebrew/Aramaic thought we know Jesus taught in. There are several examples of two variant readings in the Greek texts being perfectly valid translations of the one Aramaic word found in the Peshitta.</p> <p>There are also a number of occasions where I've found allusions back to Hebrew OT passages via Aramaic words which share the same root as Hebrew words. Too many to be coincidence in my opinion. This is one of the unique features of the bible, especially the Hebrew; the sheer number of internal references and word link allusions is in my opinion beyond Human capability. The Peshitta seems to follow that pattern within itself and also beyond itself into the Hebrew as one united whole. The Greek NT reflects this within itself, as it would be expected to do being either directly inspired or divinely arranged translation of an inspired Aramaic text (I'm not absolutely certain which one). However it doesn't have the same capacity for the same kind of links between OT and NT, as Greek and Hebrew are very different languages and very different ways of thinking.</p> <p>Individuals will ultimately have to make their own mind up. The aim of this project is to make these texts more available than they currently are.</p>"},{"location":"#source-documents","title":"Source documents","text":"<p>The Peshitta NT text provided is the BFBS version that comes with the SEDRA 3 project distribution, a crowd sourced Syriac Lexicon project. These files are made freely available from Beth Mardutho. Further details of the SEDRA project can be found on this website, as well as the following publication.</p> <p>G. Kiraz, `Automatic Concordance Generation of Syriac Texts'. In VI Symposium Syriacum 1992, ed. R. Lavenant, Orientalia Christiana Analecta 247, Rome, 1994.</p> <p>SEDRA 3 was the last release in downloadable file format. SEDRA 4 is available as a living online DB that is accessible under Apache 2.0 licence (hence the reason this project is also using that licence) via a JSON API OpenAPI.</p>"},{"location":"#available-bible-modules","title":"Available Bible Modules","text":"<p>This project aims to provide both NT text modules and also a lexicon module. For the texts, it is intended that at least two versions be produced. The first using Unicode Hebrew consonants and pointing for those who are already familiar with Hebrew but not yet the Aramaic script, as a means of making the text more accessible to bible students. The second using Unicode Aramaic consonants and vowel pointing for those familiar with the Aramaic script.</p> <p>The lexicon module should be shared by any bible modules provided and use the SEDRA numbers as references (of the form SXXXX paralleling the HXXXX and GXXXX Hebrew and Greek strongs numbers normally used as references). This may also require updates to bible software projects so they can use SEDRA numbers as they currently do Strongs numbers.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#010-2024-04-12","title":"0.1.0 - 2024-04-12","text":"<p>Compare with first commit</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>add auto-changelog (71d5ecb by David James McCorrie).</li> <li>update the pdm lock with latest versions (e578bca by David James McCorrie).</li> <li>update dependancy versions (25901b6 by David James McCorrie).</li> <li>fixed the pyproject.toml dep versions imported from poetry (6f0a6d2 by David James McCorrie).</li> <li>add .pdm-python to .gitignore (f6e7981 by David James McCorrie).</li> <li>migrate from poetry to pdm (6b1a92d by David James McCorrie).</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>add support for final forms, and improve the hebrew translit mappings (e4407d6 by David James McCorrie).</li> <li>add initial support for vpl and osis (7e901d6 by David James McCorrie).</li> <li>proper syriac font in generated HTML (021e3c3 by David James McCorrie).</li> <li>add support for HTML bible module generation as well as Markdown (c047d89 by David James McCorrie).</li> <li>generate bible text using either Hebrew/syriac unicode alphabets (7ca9a3d by David James McCorrie).</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>start to add some more meaningfull structure (bb0b0b4 by David James McCorrie).</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd abm-tools\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>pdm run abm-tools [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"license/","title":"License","text":"<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> abm_tools<ul> <li> cli</li> <li> debug</li> <li> errors</li> <li> render<ul> <li> html</li> <li> interface</li> <li> md</li> <li> osis</li> <li> vpl</li> </ul> </li> <li> sedra<ul> <li> bible</li> <li> db</li> </ul> </li> <li> templates<ul> <li> html</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/abm_tools/","title":"Index","text":""},{"location":"reference/abm_tools/#abm_tools","title":"abm_tools","text":"<p>abm_tools package.</p> <p>aramaic bible module tools</p>"},{"location":"reference/abm_tools/cli/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cli","text":""},{"location":"reference/abm_tools/cli/#abm_tools.cli","title":"cli","text":"<p>Module that contains the command line application.</p>"},{"location":"reference/abm_tools/cli/#abm_tools.cli.bible","title":"bible","text":"<pre><code>bible(\n    alphabet: str,\n    fmt: str,\n    output_path: Path,\n    mod_name: str,\n) -&gt; None\n</code></pre> <p>Create Aramaic bible module MOD_NAME in the FORMAT and ALPHABET.</p> Source code in <code>src/abm_tools/cli.py</code> <pre><code>@gen.command()\n@click.argument(\"mod_name\", type=str)\n@click.argument(\n    \"output_path\",\n    type=click.Path(exists=False, dir_okay=True, file_okay=False, path_type=Path),\n)\n@click.option(\n    \"-a\",\n    \"--alphabet\",\n    default=\"syriac\",\n    type=click.Choice(list(TRANSLIT_MAPS.keys()), case_sensitive=False),\n)\n@click.option(\n    \"-f\",\n    \"--format\",\n    \"fmt\",\n    default=\"txt\",\n    type=click.Choice(_BIBLE_RENDERERS, case_sensitive=False),\n)\ndef bible(\n    alphabet: str,\n    fmt: str,\n    output_path: Path,\n    mod_name: str,\n) -&gt; None:\n    \"\"\"Create Aramaic bible module MOD_NAME in the FORMAT and ALPHABET.\"\"\"\n    render_bible(\n        alphabet=alphabet,\n        fmt=fmt,\n        output_path=output_path,\n        mod_name=mod_name,\n    )\n</code></pre>"},{"location":"reference/abm_tools/cli/#abm_tools.cli.cache_file","title":"cache_file","text":"<pre><code>cache_file() -&gt; None\n</code></pre> <p>Generate a cache file for easier SEDRA3 bible parsing.</p> Source code in <code>src/abm_tools/cli.py</code> <pre><code>@gen.command()\ndef cache_file() -&gt; None:\n    \"\"\"Generate a cache file for easier SEDRA3 bible parsing.\"\"\"\n    gen_bible_cache_file()\n</code></pre>"},{"location":"reference/abm_tools/cli/#abm_tools.cli.gen","title":"gen","text":"<pre><code>gen() -&gt; None\n</code></pre> <p>Tools for generating Aramaic bible software modules.</p> Source code in <code>src/abm_tools/cli.py</code> <pre><code>@main.group()\ndef gen() -&gt; None:\n    \"\"\"Tools for generating Aramaic bible software modules.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/cli/#abm_tools.cli.lookup","title":"lookup","text":"<pre><code>lookup(word_id: int) -&gt; None\n</code></pre> <p>Lookup a word in the SEDRA 4 DataBase.</p> Source code in <code>src/abm_tools/cli.py</code> <pre><code>@main.command()\n@click.argument(\"word_id\", type=int)\ndef lookup(word_id: int) -&gt; None:\n    \"\"\"Lookup a word in the SEDRA 4 DataBase.\"\"\"\n    click.echo(sedra4_db_word_json(word_id=word_id))\n</code></pre>"},{"location":"reference/abm_tools/cli/#abm_tools.cli.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> <p>Tools for interacting with SEDRA and generating aramain bible modules.</p> Source code in <code>src/abm_tools/cli.py</code> <pre><code>@click.group()\ndef main() -&gt; None:\n    \"\"\"Tools for interacting with SEDRA and generating aramain bible modules.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/debug/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> debug","text":""},{"location":"reference/abm_tools/debug/#abm_tools.debug","title":"debug","text":"<p>Debugging utilities.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<pre><code>Environment(\n    interpreter_name: str,\n    interpreter_version: str,\n    platform: str,\n    packages: list[Package],\n    variables: list[Variable],\n)\n</code></pre> <p>Dataclass to store environment information.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Package","title":"Package  <code>dataclass</code>","text":"<pre><code>Package(name: str, version: str)\n</code></pre> <p>Dataclass describing a Python package.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<pre><code>Variable(name: str, value: str)\n</code></pre> <p>Dataclass describing an environment variable.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>         \u2013          <p>Environment information.</p> </li> </ul> Source code in <code>src/abm_tools/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"abm-tools\"]\n    variables = [\n        \"PYTHONPATH\",\n        *[var for var in os.environ if var.startswith(\"ABM_TOOLS\")],\n    ]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'abm-tools') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>             (<code>str</code>, default:                 <code>'abm-tools'</code> )         \u2013          <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A version number.</p> </li> </ul> Source code in <code>src/abm_tools/debug.py</code> <pre><code>def get_version(dist: str = \"abm-tools\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/abm_tools/debug/#abm_tools.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/abm_tools/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    for _var in info.variables:\n        pass\n    for _pkg in info.packages:\n        pass\n</code></pre>"},{"location":"reference/abm_tools/errors/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> errors","text":""},{"location":"reference/abm_tools/errors/#abm_tools.errors","title":"errors","text":"<p>Common error types.</p>"},{"location":"reference/abm_tools/errors/#abm_tools.errors.InvalidOptionError","title":"InvalidOptionError","text":"<pre><code>InvalidOptionError(\n    name: str, options: Iterable, value: object\n)\n</code></pre> <p>             Bases: <code>BaseException</code></p> <p>Value is not one of the valid options.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>the name of the option for the error message</p> </li> <li> <code>options</code>             (<code>Iterable</code>)         \u2013          <p>iterable of the option strings</p> </li> <li> <code>value</code>             (<code>object</code>)         \u2013          <p>the invalid object received</p> </li> </ul> Source code in <code>src/abm_tools/errors.py</code> <pre><code>def __init__(self, name: str, options: Iterable, value: object) -&gt; None:\n    \"\"\"Initialise error.\n\n    Args:\n       name: the name of the option for the error message\n       options: iterable of the option strings\n       value: the invalid object received\n    \"\"\"\n    super().__init__(f\"{name} '{value}' is not one of the options: {options}\")\n</code></pre>"},{"location":"reference/abm_tools/render/","title":"Index","text":""},{"location":"reference/abm_tools/render/#abm_tools.render","title":"render","text":"<p>Render bible text into different formats.</p>"},{"location":"reference/abm_tools/render/#abm_tools.render.notify_state_changed","title":"notify_state_changed","text":"<pre><code>notify_state_changed(\n    renderer: BibleRenderer,\n    ref_old: SEDRAPassageRef,\n    ref_new: SEDRAPassageRef,\n) -&gt; None\n</code></pre> <p>Update the renderer state with any reference changes.</p> Source code in <code>src/abm_tools/render/__init__.py</code> <pre><code>def notify_state_changed(\n    renderer: BibleRenderer,\n    ref_old: SEDRAPassageRef,\n    ref_new: SEDRAPassageRef,\n) -&gt; None:\n    \"\"\"Update the renderer state with any reference changes.\"\"\"\n    if ref_new.verse != ref_old.verse:\n        renderer.end_verse()\n\n    if ref_new.chapter != ref_old.chapter:\n        renderer.end_chapter()\n\n    if ref_new.book != ref_old.book:\n        renderer.end_book()\n\n    if ref_new.book != ref_old.book:\n        renderer.start_book(ref_new.book)\n\n    if ref_new.chapter != ref_old.chapter:\n        renderer.start_chapter(ref_new.chapter)\n\n    if ref_new.verse != ref_old.verse:\n        renderer.start_verse(ref_new.verse)\n</code></pre>"},{"location":"reference/abm_tools/render/#abm_tools.render.render_bible","title":"render_bible","text":"<pre><code>render_bible(\n    mod_name: str,\n    fmt: str,\n    alphabet: str,\n    output_path: Path,\n) -&gt; None\n</code></pre> <p>Get a BibleRenderer to render a bible.</p> <p>Parameters:</p> <ul> <li> <code>mod_name</code>             (<code>str</code>)         \u2013          <p>name of the module</p> </li> <li> <code>fmt</code>             (<code>str</code>)         \u2013          <p>module format</p> </li> <li> <code>alphabet</code>             (<code>str</code>)         \u2013          <p>alphabet to use for the bible text</p> </li> <li> <code>output_path</code>             (<code>Path</code>)         \u2013          <p>path to output the module to</p> </li> </ul> Source code in <code>src/abm_tools/render/__init__.py</code> <pre><code>def render_bible(\n    mod_name: str,\n    fmt: str,\n    alphabet: str,\n    output_path: Path,\n) -&gt; None:\n    \"\"\"Get a BibleRenderer to render a bible.\n\n    Args:\n        mod_name: name of the module\n        fmt: module format\n        alphabet: alphabet to use for the bible text\n        output_path: path to output the module to\n    \"\"\"\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    renderer = _get_bible_renderer(\n        fmt=fmt,\n        alphabet=alphabet,\n        output_path=output_path,\n    )\n\n    current_ref: SEDRAPassageRef | None = None\n\n    renderer.start_mod(name=mod_name)\n\n    try:\n        for ref, words in parse_bible_cache_file():\n            if ref != current_ref:\n                if current_ref is None:\n                    renderer.start_book(ref.book)\n                    renderer.start_chapter(ref.chapter)\n                    renderer.start_verse(ref.verse)\n                else:\n                    notify_state_changed(renderer, ref_old=current_ref, ref_new=ref)\n\n                current_ref = ref\n\n            for word_id in words:\n                renderer.add_word(word_id)\n\n        renderer.end_verse()\n        renderer.end_chapter()\n        renderer.end_book()\n\n    finally:\n        renderer.end_mod()\n</code></pre>"},{"location":"reference/abm_tools/render/html/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> html","text":""},{"location":"reference/abm_tools/render/html/#abm_tools.render.html","title":"html","text":"<p>Render text format.</p>"},{"location":"reference/abm_tools/render/html/#abm_tools.render.html.RenderBibleHTML","title":"RenderBibleHTML","text":"<pre><code>RenderBibleHTML(\n    output_path: Path, alphabet: str = \"syriac\"\n)\n</code></pre> <p>Renderer using plain text HTML format.</p> Source code in <code>src/abm_tools/render/html.py</code> <pre><code>def __init__(\n    self,\n    output_path: Path,\n    alphabet: str = \"syriac\",\n) -&gt; None:\n    \"\"\"Initialise a text renderer.\"\"\"\n    self._output_path = output_path\n    self._stream: TextIO | None = None\n    self._alphabet = alphabet\n\n    self._words: list[str] = []\n\n    self._book: str = \"\"\n    self._chapter: int = 0\n    self._verse: int = 0\n</code></pre>"},{"location":"reference/abm_tools/render/html/#abm_tools.render.html.RenderBibleHTML.add_word","title":"add_word","text":"<pre><code>add_word(word_id: int) -&gt; None\n</code></pre> <p>Add word to the active verse.</p> Source code in <code>src/abm_tools/render/html.py</code> <pre><code>def add_word(self, word_id: int) -&gt; None:\n    \"\"\"Add word to the active verse.\"\"\"\n    words_db = parse_sedra3_words_db_file()\n    word = str(words_db.loc[word_id, \"strVocalised\"])\n\n    self._words.append(from_transliteration(word, alphabet=self._alphabet))\n</code></pre>"},{"location":"reference/abm_tools/render/html/#abm_tools.render.html.RenderBibleHTML.end_book","title":"end_book","text":"<pre><code>end_book() -&gt; None\n</code></pre> <p>End the current book.</p> Source code in <code>src/abm_tools/render/html.py</code> <pre><code>def end_book(self) -&gt; None:\n    \"\"\"End the current book.\"\"\"\n    self._book = \"\"\n</code></pre>"},{"location":"reference/abm_tools/render/html/#abm_tools.render.html.RenderBibleHTML.end_chapter","title":"end_chapter","text":"<pre><code>end_chapter() -&gt; None\n</code></pre> <p>End the current book chapter.</p> Source code in <code>src/abm_tools/render/html.py</code> <pre><code>def end_chapter(self) -&gt; None:\n    \"\"\"End the current book chapter.\"\"\"\n    self._chapter = 0\n</code></pre>"},{"location":"reference/abm_tools/render/html/#abm_tools.render.html.RenderBibleHTML.end_mod","title":"end_mod","text":"<pre><code>end_mod() -&gt; None\n</code></pre> <p>End the module.</p> Source code in <code>src/abm_tools/render/html.py</code> <pre><code>def end_mod(self) -&gt; None:\n    \"\"\"End the module.\"\"\"\n    if self._stream is None:\n        raise RuntimeError(\"Can't end module without starting it\")\n\n    print(\"&lt;/body&gt;&lt;/html&gt;\", file=self._stream)\n\n    self._stream.close()\n</code></pre>"},{"location":"reference/abm_tools/render/html/#abm_tools.render.html.RenderBibleHTML.end_verse","title":"end_verse","text":"<pre><code>end_verse() -&gt; None\n</code></pre> <p>End the verse.</p> Source code in <code>src/abm_tools/render/html.py</code> <pre><code>def end_verse(self) -&gt; None:\n    \"\"\"End the verse.\"\"\"\n    text = \" \".join(self._words)\n    self._words.clear()\n\n    if self._stream is None:\n        raise RuntimeError(\"Can't start a verse without starting a module\")\n\n    print(\n        f\"&lt;p&gt;&lt;b&gt;{self._verse}&lt;/b&gt; {text}&lt;/p&gt;\",\n        file=self._stream,\n    )\n\n    self._verse = 0\n</code></pre>"},{"location":"reference/abm_tools/render/html/#abm_tools.render.html.RenderBibleHTML.start_book","title":"start_book","text":"<pre><code>start_book(number: int) -&gt; None\n</code></pre> <p>Start a new book.</p> Source code in <code>src/abm_tools/render/html.py</code> <pre><code>def start_book(self, number: int) -&gt; None:\n    \"\"\"Start a new book.\"\"\"\n    self._book = book_name(number)\n\n    if self._stream is None:\n        raise RuntimeError(\"Can't start a book without starting a module\")\n\n    print(f\"&lt;h1&gt;{self._book}&lt;/h1&gt;\", file=self._stream)\n</code></pre>"},{"location":"reference/abm_tools/render/html/#abm_tools.render.html.RenderBibleHTML.start_chapter","title":"start_chapter","text":"<pre><code>start_chapter(number: int) -&gt; None\n</code></pre> <p>Start a book chapter.</p> Source code in <code>src/abm_tools/render/html.py</code> <pre><code>def start_chapter(self, number: int) -&gt; None:\n    \"\"\"Start a book chapter.\"\"\"\n    self._chapter = number\n\n    if self._stream is None:\n        raise RuntimeError(\"Can't start a chapter without starting a module\")\n\n    print(f\"&lt;h2&gt;Chapter {self._chapter}&lt;/h2&gt;\", file=self._stream)\n</code></pre>"},{"location":"reference/abm_tools/render/html/#abm_tools.render.html.RenderBibleHTML.start_mod","title":"start_mod","text":"<pre><code>start_mod(name: str) -&gt; None\n</code></pre> <p>Start the module.</p> Source code in <code>src/abm_tools/render/html.py</code> <pre><code>def start_mod(self, name: str) -&gt; None:\n    \"\"\"Start the module.\"\"\"\n    base_path = self._output_path / name\n    base_path.mkdir(parents=True, exist_ok=True)\n\n    resources_path = base_path / \"resources\"\n    resources_path.mkdir(parents=True, exist_ok=True)\n\n    resource_trav = importlib.resources.files(\n        \"abm_tools.templates.html.resources\",\n    )\n\n    for file in resource_trav.iterdir():\n        (resources_path / file.name).write_bytes(file.read_bytes())\n\n    self._stream = (base_path / \"index.html\").open(mode=\"w\", encoding=\"utf-8\")\n    lang = {\"syriac\": \"syr\", \"hebrew\": \"heb\"}[self._alphabet]\n\n    css = (\n        '&lt;meta content=\"text/html;charset=utf-8\" http-equiv=\"Content-Type\"&gt;'\n        '&lt;meta content=\"utf-8\" http-equiv=\"encoding\"&gt;'\n        f\"&lt;link rel='stylesheet' href='resources/{lang}.css'&gt;\"\n    )\n\n    print(\n        f\"&lt;html dir='rtl' lang='{lang}'&gt;{css}&lt;head&gt;&lt;/head&gt;&lt;body&gt;\",\n        file=self._stream,\n    )\n</code></pre>"},{"location":"reference/abm_tools/render/html/#abm_tools.render.html.RenderBibleHTML.start_verse","title":"start_verse","text":"<pre><code>start_verse(number: int) -&gt; None\n</code></pre> <p>Start the verse.</p> Source code in <code>src/abm_tools/render/html.py</code> <pre><code>def start_verse(self, number: int) -&gt; None:\n    \"\"\"Start the verse.\"\"\"\n    self._verse = number\n</code></pre>"},{"location":"reference/abm_tools/render/interface/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> interface","text":""},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface","title":"interface","text":"<p>Renderer interfaces.</p>"},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface.BibleRenderer","title":"BibleRenderer","text":"<p>             Bases: <code>Protocol</code></p> <p>Protocol used in rendering bibles.</p>"},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface.BibleRenderer.add_word","title":"add_word","text":"<pre><code>add_word(word_id: int) -&gt; None\n</code></pre> <p>Add word to the active verse.</p> Source code in <code>src/abm_tools/render/interface.py</code> <pre><code>def add_word(self, word_id: int) -&gt; None:\n    \"\"\"Add word to the active verse.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface.BibleRenderer.end_book","title":"end_book","text":"<pre><code>end_book() -&gt; None\n</code></pre> <p>End the current book.</p> Source code in <code>src/abm_tools/render/interface.py</code> <pre><code>def end_book(self) -&gt; None:\n    \"\"\"End the current book.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface.BibleRenderer.end_chapter","title":"end_chapter","text":"<pre><code>end_chapter() -&gt; None\n</code></pre> <p>End the current book chapter.</p> Source code in <code>src/abm_tools/render/interface.py</code> <pre><code>def end_chapter(self) -&gt; None:\n    \"\"\"End the current book chapter.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface.BibleRenderer.end_mod","title":"end_mod","text":"<pre><code>end_mod() -&gt; None\n</code></pre> <p>End the module.</p> Source code in <code>src/abm_tools/render/interface.py</code> <pre><code>def end_mod(self) -&gt; None:\n    \"\"\"End the module.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface.BibleRenderer.end_verse","title":"end_verse","text":"<pre><code>end_verse() -&gt; None\n</code></pre> <p>End the verse.</p> Source code in <code>src/abm_tools/render/interface.py</code> <pre><code>def end_verse(self) -&gt; None:\n    \"\"\"End the verse.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface.BibleRenderer.start_book","title":"start_book","text":"<pre><code>start_book(number: int) -&gt; None\n</code></pre> <p>Start a new book.</p> Source code in <code>src/abm_tools/render/interface.py</code> <pre><code>def start_book(self, number: int) -&gt; None:\n    \"\"\"Start a new book.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface.BibleRenderer.start_chapter","title":"start_chapter","text":"<pre><code>start_chapter(number: int) -&gt; None\n</code></pre> <p>Start a book chapter.</p> Source code in <code>src/abm_tools/render/interface.py</code> <pre><code>def start_chapter(self, number: int) -&gt; None:\n    \"\"\"Start a book chapter.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface.BibleRenderer.start_mod","title":"start_mod","text":"<pre><code>start_mod(name: str) -&gt; None\n</code></pre> <p>Start the module.</p> Source code in <code>src/abm_tools/render/interface.py</code> <pre><code>def start_mod(self, name: str) -&gt; None:\n    \"\"\"Start the module.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/render/interface/#abm_tools.render.interface.BibleRenderer.start_verse","title":"start_verse","text":"<pre><code>start_verse(number: int) -&gt; None\n</code></pre> <p>Start the verse.</p> Source code in <code>src/abm_tools/render/interface.py</code> <pre><code>def start_verse(self, number: int) -&gt; None:\n    \"\"\"Start the verse.\"\"\"\n</code></pre>"},{"location":"reference/abm_tools/render/md/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> md","text":""},{"location":"reference/abm_tools/render/md/#abm_tools.render.md","title":"md","text":"<p>Render Markdown format.</p>"},{"location":"reference/abm_tools/render/md/#abm_tools.render.md.RenderBibleMarkdown","title":"RenderBibleMarkdown","text":"<pre><code>RenderBibleMarkdown(\n    output_path: Path, alphabet: str = \"syriac\"\n)\n</code></pre> <p>Renderer using plain text in Markdown format.</p> Source code in <code>src/abm_tools/render/md.py</code> <pre><code>def __init__(\n    self,\n    output_path: Path,\n    alphabet: str = \"syriac\",\n) -&gt; None:\n    \"\"\"Initialise a text renderer.\"\"\"\n    self._output_path = output_path\n    self._stream: TextIO | None = None\n    self._alphabet = alphabet\n\n    self._words: list[str] = []\n\n    self._book: str = \"\"\n    self._chapter: int = 0\n    self._verse: int = 0\n</code></pre>"},{"location":"reference/abm_tools/render/md/#abm_tools.render.md.RenderBibleMarkdown.add_word","title":"add_word","text":"<pre><code>add_word(word_id: int) -&gt; None\n</code></pre> <p>Add word to the active verse.</p> Source code in <code>src/abm_tools/render/md.py</code> <pre><code>def add_word(self, word_id: int) -&gt; None:\n    \"\"\"Add word to the active verse.\"\"\"\n    words_db = parse_sedra3_words_db_file()\n    word = str(words_db.loc[word_id, \"strVocalised\"])\n\n    self._words.append(from_transliteration(word, alphabet=self._alphabet))\n</code></pre>"},{"location":"reference/abm_tools/render/md/#abm_tools.render.md.RenderBibleMarkdown.end_book","title":"end_book","text":"<pre><code>end_book() -&gt; None\n</code></pre> <p>End the current book.</p> Source code in <code>src/abm_tools/render/md.py</code> <pre><code>def end_book(self) -&gt; None:\n    \"\"\"End the current book.\"\"\"\n    self._book = \"\"\n</code></pre>"},{"location":"reference/abm_tools/render/md/#abm_tools.render.md.RenderBibleMarkdown.end_chapter","title":"end_chapter","text":"<pre><code>end_chapter() -&gt; None\n</code></pre> <p>End the current book chapter.</p> Source code in <code>src/abm_tools/render/md.py</code> <pre><code>def end_chapter(self) -&gt; None:\n    \"\"\"End the current book chapter.\"\"\"\n    self._chapter = 0\n</code></pre>"},{"location":"reference/abm_tools/render/md/#abm_tools.render.md.RenderBibleMarkdown.end_mod","title":"end_mod","text":"<pre><code>end_mod() -&gt; None\n</code></pre> <p>End the module.</p> Source code in <code>src/abm_tools/render/md.py</code> <pre><code>def end_mod(self) -&gt; None:\n    \"\"\"End the module.\"\"\"\n    if self._stream is None:\n        return\n\n    self._stream.close()\n</code></pre>"},{"location":"reference/abm_tools/render/md/#abm_tools.render.md.RenderBibleMarkdown.end_verse","title":"end_verse","text":"<pre><code>end_verse() -&gt; None\n</code></pre> <p>End the verse.</p> Source code in <code>src/abm_tools/render/md.py</code> <pre><code>def end_verse(self) -&gt; None:\n    \"\"\"End the verse.\"\"\"\n    text = \" \".join(self._words)\n    self._words.clear()\n\n    if self._stream is None:\n        raise RuntimeError(\"Can't start a verse without starting a module\")\n\n    print(\n        f\"&amp;#x202b;*{self._verse}* {text}\\n\",\n        file=self._stream,\n    )\n\n    self._verse = 0\n</code></pre>"},{"location":"reference/abm_tools/render/md/#abm_tools.render.md.RenderBibleMarkdown.start_book","title":"start_book","text":"<pre><code>start_book(number: int) -&gt; None\n</code></pre> <p>Start a new book.</p> Source code in <code>src/abm_tools/render/md.py</code> <pre><code>def start_book(self, number: int) -&gt; None:\n    \"\"\"Start a new book.\"\"\"\n    self._book = book_name(number)\n\n    if self._stream is None:\n        raise RuntimeError(\"Can't start a book without starting a module\")\n\n    print(f\"# {self._book}\\n\", file=self._stream)\n</code></pre>"},{"location":"reference/abm_tools/render/md/#abm_tools.render.md.RenderBibleMarkdown.start_chapter","title":"start_chapter","text":"<pre><code>start_chapter(number: int) -&gt; None\n</code></pre> <p>Start a book chapter.</p> Source code in <code>src/abm_tools/render/md.py</code> <pre><code>def start_chapter(self, number: int) -&gt; None:\n    \"\"\"Start a book chapter.\"\"\"\n    self._chapter = number\n\n    if self._stream is None:\n        raise RuntimeError(\"Can't start a chapter without starting a module\")\n\n    print(f\"## Chapter {self._chapter}\\n\", file=self._stream)\n</code></pre>"},{"location":"reference/abm_tools/render/md/#abm_tools.render.md.RenderBibleMarkdown.start_mod","title":"start_mod","text":"<pre><code>start_mod(name: str) -&gt; None\n</code></pre> <p>Start the module.</p> Source code in <code>src/abm_tools/render/md.py</code> <pre><code>def start_mod(self, name: str) -&gt; None:\n    \"\"\"Start the module.\"\"\"\n    self._stream = (self._output_path / f\"{name}.md\").open(\n        mode=\"w\",\n        encoding=\"utf-8\",\n    )\n</code></pre>"},{"location":"reference/abm_tools/render/md/#abm_tools.render.md.RenderBibleMarkdown.start_verse","title":"start_verse","text":"<pre><code>start_verse(number: int) -&gt; None\n</code></pre> <p>Start the verse.</p> Source code in <code>src/abm_tools/render/md.py</code> <pre><code>def start_verse(self, number: int) -&gt; None:\n    \"\"\"Start the verse.\"\"\"\n    self._verse = number\n</code></pre>"},{"location":"reference/abm_tools/render/osis/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> osis","text":""},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis","title":"osis","text":"<p>Render OSIS 2.1 format.</p> <p>From OSIS format it's possible to generate SWORD modules. Crosswire don't provide documentation of the SWORD module format, instead require people to depend on the SWORD API. There are alternatives that provide unofficial support for directly reading and writing SWORD modules, but this may break any time if the underlying format changes.</p> <p>For the moment, for these reasons this format is the preferred way to generate SWORD modules using (osis2mod)[https://wiki.crosswire.org/Osis2mod].</p> <p>Todo</p> <p>update the Makefile to postprocess this module format and generate SWORD modules using the official tools. I'm not fully comfortable with this as we need to find a way of doing that without depending on arbitrary binaries.</p>"},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis.RenderBibleOSIS","title":"RenderBibleOSIS","text":"<pre><code>RenderBibleOSIS(\n    output_path: Path, alphabet: str = \"syriac\"\n)\n</code></pre> <p>Renderer using plain text in OSIS format.</p> Source code in <code>src/abm_tools/render/osis.py</code> <pre><code>def __init__(\n    self,\n    output_path: Path,\n    alphabet: str = \"syriac\",\n) -&gt; None:\n    \"\"\"Initialise a text renderer.\"\"\"\n    self._output_path = output_path\n    self._stream: TextIO | None = None\n    self._alphabet = alphabet\n\n    self._words: list[str] = []\n\n    self._book: str = \"\"\n    self._chapter: int = 0\n    self._verse: int = 0\n</code></pre>"},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis.RenderBibleOSIS.add_word","title":"add_word","text":"<pre><code>add_word(word_id: int) -&gt; None\n</code></pre> <p>Add word to the active verse.</p> Source code in <code>src/abm_tools/render/osis.py</code> <pre><code>def add_word(self, word_id: int) -&gt; None:\n    \"\"\"Add word to the active verse.\"\"\"\n    words_db = parse_sedra3_words_db_file()\n    word = str(words_db.loc[word_id, \"strVocalised\"])\n\n    self._words.append(from_transliteration(word, alphabet=self._alphabet))\n</code></pre>"},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis.RenderBibleOSIS.end_book","title":"end_book","text":"<pre><code>end_book() -&gt; None\n</code></pre> <p>End the current book.</p> Source code in <code>src/abm_tools/render/osis.py</code> <pre><code>def end_book(self) -&gt; None:\n    \"\"\"End the current book.\"\"\"\n    self._book = \"\"\n</code></pre>"},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis.RenderBibleOSIS.end_chapter","title":"end_chapter","text":"<pre><code>end_chapter() -&gt; None\n</code></pre> <p>End the current book chapter.</p> Source code in <code>src/abm_tools/render/osis.py</code> <pre><code>def end_chapter(self) -&gt; None:\n    \"\"\"End the current book chapter.\"\"\"\n    self._chapter = 0\n</code></pre>"},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis.RenderBibleOSIS.end_mod","title":"end_mod","text":"<pre><code>end_mod() -&gt; None\n</code></pre> <p>End the module.</p> Source code in <code>src/abm_tools/render/osis.py</code> <pre><code>def end_mod(self) -&gt; None:\n    \"\"\"End the module.\"\"\"\n    if self._stream is None:\n        return\n\n    self._stream.close()\n</code></pre>"},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis.RenderBibleOSIS.end_verse","title":"end_verse","text":"<pre><code>end_verse() -&gt; None\n</code></pre> <p>End the verse.</p> Source code in <code>src/abm_tools/render/osis.py</code> <pre><code>def end_verse(self) -&gt; None:\n    \"\"\"End the verse.\"\"\"\n    text = \" \".join(self._words)\n    self._words.clear()\n\n    if self._stream is None:\n        raise RuntimeError(\"Can't start a verse without starting a module\")\n\n    print(\n        f\"{self._book} {self._chapter}:{self._verse} {text}\",\n        file=self._stream,\n    )\n\n    self._verse = 0\n</code></pre>"},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis.RenderBibleOSIS.start_book","title":"start_book","text":"<pre><code>start_book(number: int) -&gt; None\n</code></pre> <p>Start a new book.</p> Source code in <code>src/abm_tools/render/osis.py</code> <pre><code>def start_book(self, number: int) -&gt; None:\n    \"\"\"Start a new book.\"\"\"\n    self._book = book_name(number)\n</code></pre>"},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis.RenderBibleOSIS.start_chapter","title":"start_chapter","text":"<pre><code>start_chapter(number: int) -&gt; None\n</code></pre> <p>Start a book chapter.</p> Source code in <code>src/abm_tools/render/osis.py</code> <pre><code>def start_chapter(self, number: int) -&gt; None:\n    \"\"\"Start a book chapter.\"\"\"\n    self._chapter = number\n</code></pre>"},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis.RenderBibleOSIS.start_mod","title":"start_mod","text":"<pre><code>start_mod(name: str) -&gt; None\n</code></pre> <p>Start the module.</p> Source code in <code>src/abm_tools/render/osis.py</code> <pre><code>def start_mod(self, name: str) -&gt; None:\n    \"\"\"Start the module.\"\"\"\n    self._stream = (self._output_path / f\"{name}.osis\").open(\n        mode=\"w\",\n        encoding=\"utf-8\",\n    )\n</code></pre>"},{"location":"reference/abm_tools/render/osis/#abm_tools.render.osis.RenderBibleOSIS.start_verse","title":"start_verse","text":"<pre><code>start_verse(number: int) -&gt; None\n</code></pre> <p>Start the verse.</p> Source code in <code>src/abm_tools/render/osis.py</code> <pre><code>def start_verse(self, number: int) -&gt; None:\n    \"\"\"Start the verse.\"\"\"\n    self._verse = number\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> vpl","text":""},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl","title":"vpl","text":"<p>Render verse per line (VPL) format.</p> <p>The verse per line format is used by SWORD project for simple modules that don't need additional formatting. So this module format is just a simple text format without extra markup.</p>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl--example","title":"Example","text":"<pre><code>Genesis 1:1 In the beginning God created the heaven and the earth.\nGenesis 1:2 And the earth was without form, and void; and darkness was upon ...\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl.RenderBibleVPL","title":"RenderBibleVPL","text":"<pre><code>RenderBibleVPL(output_path: Path, alphabet: str = 'syriac')\n</code></pre> <p>Renderer using plain text in VPL format.</p> Source code in <code>src/abm_tools/render/vpl.py</code> <pre><code>def __init__(\n    self,\n    output_path: Path,\n    alphabet: str = \"syriac\",\n) -&gt; None:\n    \"\"\"Initialise a text renderer.\"\"\"\n    self._output_path = output_path\n    self._stream: TextIO | None = None\n    self._alphabet = alphabet\n\n    self._words: list[str] = []\n\n    self._book: str = \"\"\n    self._chapter: int = 0\n    self._verse: int = 0\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl.RenderBibleVPL.add_word","title":"add_word","text":"<pre><code>add_word(word_id: int) -&gt; None\n</code></pre> <p>Add word to the active verse.</p> Source code in <code>src/abm_tools/render/vpl.py</code> <pre><code>def add_word(self, word_id: int) -&gt; None:\n    \"\"\"Add word to the active verse.\"\"\"\n    words_db = parse_sedra3_words_db_file()\n    word = str(words_db.loc[word_id, \"strVocalised\"])\n\n    self._words.append(from_transliteration(word, alphabet=self._alphabet))\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl.RenderBibleVPL.end_book","title":"end_book","text":"<pre><code>end_book() -&gt; None\n</code></pre> <p>End the current book.</p> Source code in <code>src/abm_tools/render/vpl.py</code> <pre><code>def end_book(self) -&gt; None:\n    \"\"\"End the current book.\"\"\"\n    self._book = \"\"\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl.RenderBibleVPL.end_chapter","title":"end_chapter","text":"<pre><code>end_chapter() -&gt; None\n</code></pre> <p>End the current book chapter.</p> Source code in <code>src/abm_tools/render/vpl.py</code> <pre><code>def end_chapter(self) -&gt; None:\n    \"\"\"End the current book chapter.\"\"\"\n    self._chapter = 0\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl.RenderBibleVPL.end_mod","title":"end_mod","text":"<pre><code>end_mod() -&gt; None\n</code></pre> <p>End the module.</p> Source code in <code>src/abm_tools/render/vpl.py</code> <pre><code>def end_mod(self) -&gt; None:\n    \"\"\"End the module.\"\"\"\n    if self._stream is None:\n        return\n\n    self._stream.close()\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl.RenderBibleVPL.end_verse","title":"end_verse","text":"<pre><code>end_verse() -&gt; None\n</code></pre> <p>End the verse.</p> Source code in <code>src/abm_tools/render/vpl.py</code> <pre><code>def end_verse(self) -&gt; None:\n    \"\"\"End the verse.\"\"\"\n    text = \" \".join(self._words)\n    self._words.clear()\n\n    if self._stream is None:\n        raise RuntimeError(\"Can't start a verse without starting a module\")\n\n    print(\n        f\"{self._book} {self._chapter}:{self._verse} {text}\",\n        file=self._stream,\n    )\n\n    self._verse = 0\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl.RenderBibleVPL.start_book","title":"start_book","text":"<pre><code>start_book(number: int) -&gt; None\n</code></pre> <p>Start a new book.</p> Source code in <code>src/abm_tools/render/vpl.py</code> <pre><code>def start_book(self, number: int) -&gt; None:\n    \"\"\"Start a new book.\"\"\"\n    self._book = book_name(number)\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl.RenderBibleVPL.start_chapter","title":"start_chapter","text":"<pre><code>start_chapter(number: int) -&gt; None\n</code></pre> <p>Start a book chapter.</p> Source code in <code>src/abm_tools/render/vpl.py</code> <pre><code>def start_chapter(self, number: int) -&gt; None:\n    \"\"\"Start a book chapter.\"\"\"\n    self._chapter = number\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl.RenderBibleVPL.start_mod","title":"start_mod","text":"<pre><code>start_mod(name: str) -&gt; None\n</code></pre> <p>Start the module.</p> Source code in <code>src/abm_tools/render/vpl.py</code> <pre><code>def start_mod(self, name: str) -&gt; None:\n    \"\"\"Start the module.\"\"\"\n    self._stream = (self._output_path / f\"{name}.vpl\").open(\n        mode=\"w\",\n        encoding=\"utf-8\",\n    )\n</code></pre>"},{"location":"reference/abm_tools/render/vpl/#abm_tools.render.vpl.RenderBibleVPL.start_verse","title":"start_verse","text":"<pre><code>start_verse(number: int) -&gt; None\n</code></pre> <p>Start the verse.</p> Source code in <code>src/abm_tools/render/vpl.py</code> <pre><code>def start_verse(self, number: int) -&gt; None:\n    \"\"\"Start the verse.\"\"\"\n    self._verse = number\n</code></pre>"},{"location":"reference/abm_tools/sedra/","title":"Index","text":""},{"location":"reference/abm_tools/sedra/#abm_tools.sedra","title":"sedra","text":"<p>SEDRA DB.</p>"},{"location":"reference/abm_tools/sedra/bible/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bible","text":""},{"location":"reference/abm_tools/sedra/bible/#abm_tools.sedra.bible","title":"bible","text":"<p>Module to import SEDRA source files.</p> <p>After generating modules from the BFBS.TXT file, it turns out there are a few verses that are out of order in the file. So it's not possible to just assume each line is part of a series of contiguous lines that make up verses. The whole file needs to be parsed to ensure all the words in each verse are accounted for.</p> <p>Given that, we will create an in memory structure containing all of the words in the peshitta. Making no assumptions on the number of words or the relative positions. Then post process that data structure to export an intemediate file that does conform to these basic assumptions. This should speed up multiple module generation but slow down individual module generation the first time.</p> <p>Given the source files are not changing, the intemediate format will also be checked in. Although it should be possible to regenerate it from the original files.</p>"},{"location":"reference/abm_tools/sedra/bible/#abm_tools.sedra.bible.SEDRAPassageRef","title":"SEDRAPassageRef  <code>dataclass</code>","text":"<pre><code>SEDRAPassageRef(book: int, chapter: int, verse: int)\n</code></pre> <p>SEDRA bible db passage reference.</p>"},{"location":"reference/abm_tools/sedra/bible/#abm_tools.sedra.bible.book_name","title":"book_name","text":"<pre><code>book_name(book_num: int) -&gt; str\n</code></pre> <p>Book name given a book number.</p> Source code in <code>src/abm_tools/sedra/bible.py</code> <pre><code>def book_name(book_num: int) -&gt; str:\n    \"\"\"Book name given a book number.\"\"\"\n    return BOOKS[book_num - 52]\n</code></pre>"},{"location":"reference/abm_tools/sedra/bible/#abm_tools.sedra.bible.gen_bible_cache_file","title":"gen_bible_cache_file","text":"<pre><code>gen_bible_cache_file() -&gt; None\n</code></pre> <p>Generate the bible cache file.</p> Source code in <code>src/abm_tools/sedra/bible.py</code> <pre><code>def gen_bible_cache_file() -&gt; None:\n    \"\"\"Generate the bible cache file.\"\"\"\n    bible_struct = _create_bible_structure()\n\n    with Path(\"./SEDRA/BFBS.cache\").open(mode=\"w\", encoding=\"utf-8\") as f:\n        for book_id in sorted(bible_struct.keys()):\n            for chapter_id in sorted(bible_struct[book_id].keys()):\n                for verse_id in sorted(bible_struct[book_id][chapter_id].keys()):\n                    verse_struct = bible_struct[book_id][chapter_id][verse_id]\n\n                    verse_text = \" \".join(\n                        str(verse_struct[word]) for word in sorted(verse_struct.keys())\n                    )\n\n                    f.write(f\"{book_id},{chapter_id},{verse_id},{verse_text}\\n\")\n</code></pre>"},{"location":"reference/abm_tools/sedra/bible/#abm_tools.sedra.bible.parse_bible_cache_file","title":"parse_bible_cache_file","text":"<pre><code>parse_bible_cache_file() -&gt; (\n    Generator[BibleCacheEntryTuple, None, None]\n)\n</code></pre> <p>Parse the bible cache file.</p> Source code in <code>src/abm_tools/sedra/bible.py</code> <pre><code>def parse_bible_cache_file() -&gt; Generator[BibleCacheEntryTuple, None, None]:\n    \"\"\"Parse the bible cache file.\"\"\"\n    cache_path = Path(\"./SEDRA/BFBS.cache\")\n\n    if not cache_path.is_file():\n        gen_bible_cache_file()\n\n    with cache_path.open(mode=\"r\", encoding=\"utf-8\") as f:\n        for line in f:\n            book_id, chapter_id, verse_id, text = line.strip().split(\",\")\n            words = [int(w) for w in text.split(\" \")]\n\n            yield (\n                SEDRAPassageRef(\n                    book=int(book_id),\n                    chapter=int(chapter_id),\n                    verse=int(verse_id),\n                ),\n                words,\n            )\n</code></pre>"},{"location":"reference/abm_tools/sedra/bible/#abm_tools.sedra.bible.parse_sedra3_bible_db_file","title":"parse_sedra3_bible_db_file","text":"<pre><code>parse_sedra3_bible_db_file(\n    file_name: str = \"./SEDRA/BFBS.TXT\",\n) -&gt; Generator[WordEntryTuple, None, None]\n</code></pre> <p>Import a bible text from SEDRA 3 style DB.</p> <p>Note: the words on each row are not contiguous. There are words at the end of the file that are out of order and this may be the case elsewhere. Don't rely or the order of the entries.</p> <p>Parameters:</p> <ul> <li> <code>file_name</code>             (<code>str</code>, default:                 <code>'./SEDRA/BFBS.TXT'</code> )         \u2013          <p>file name for the SEDRA3 style bible DB file (BFBS.TXT)</p> </li> </ul> Yield <p>one word entry</p> Source code in <code>src/abm_tools/sedra/bible.py</code> <pre><code>def parse_sedra3_bible_db_file(\n    file_name: str = \"./SEDRA/BFBS.TXT\",\n) -&gt; Generator[WordEntryTuple, None, None]:\n    \"\"\"Import a bible text from SEDRA 3 style DB.\n\n    Note: the words on each row are not contiguous. There are words at the end\n    of the file that are out of order and this may be the case elsewhere. Don't\n    rely or the order of the entries.\n\n    Args:\n        file_name: file name for the SEDRA3 style bible DB file (BFBS.TXT)\n\n    Yield:\n        one word entry\n    \"\"\"\n    with open(file_name, encoding=\"utf-8\") as bible_file:\n        for line in bible_file:\n            columns = line.strip().split(\",\")\n\n            if not columns:\n                continue\n\n            # First column is the database address FILE_NUMBER:LINE_NUMBER which\n            # is essentially a line number providing no valuable information as\n            # I see it right now. Each line contains only one word, and that\n            # word is already uniquely addressable via the chapter/verse/word\n            # number in the second column (index 1)\n\n            ref, word = _parse_sedra3_word_ref(columns[1])\n            word_id = _parse_sedra3_word_address(columns[2])\n\n            yield ref, word, word_id\n</code></pre>"},{"location":"reference/abm_tools/sedra/db/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> db","text":""},{"location":"reference/abm_tools/sedra/db/#abm_tools.sedra.db","title":"db","text":"<p>Module to import SEDRA DB parser using pandas for all the heavy lifting.</p>"},{"location":"reference/abm_tools/sedra/db/#abm_tools.sedra.db.from_transliteration","title":"from_transliteration","text":"<pre><code>from_transliteration(string: str, alphabet: str) -&gt; str\n</code></pre> <p>Convert transliteration string to unicode Aramaic.</p> <p>Parameters:</p> <ul> <li> <code>string</code>             (<code>str</code>)         \u2013          <p>the string to convert</p> </li> <li> <code>alphabet</code>             (<code>str</code>)         \u2013          <p>the alphabet to use hebrew/syriac</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>Converted string</p> </li> </ul> Source code in <code>src/abm_tools/sedra/db.py</code> <pre><code>def from_transliteration(string: str, alphabet: str) -&gt; str:\n    \"\"\"Convert transliteration string to unicode Aramaic.\n\n    Args:\n        string: the string to convert\n        alphabet: the alphabet to use hebrew/syriac\n\n    Returns:\n        Converted string\n    \"\"\"\n    maps = TRANSLIT_MAPS.get(alphabet)\n\n    if maps is None:\n        raise InvalidOptionError(\n            name=\"alphabet\",\n            options=TRANSLIT_MAPS.keys(),\n            value=alphabet,\n        )\n\n    translit_map, subs_map, finals_map = maps\n\n    for sub, rep in subs_map.items():\n        # switch the pointing from before a vav to after it\n        string = string.replace(sub, rep)\n\n    string = \"\".join([translit_map.get(c, c) for c in string])\n\n    # Replace any final leters with their final forms if there are any\n    final = string[-1]\n    if final in finals_map:\n        string = string[:-1] + finals_map[final]\n\n    return string\n</code></pre>"},{"location":"reference/abm_tools/sedra/db/#abm_tools.sedra.db.parse_sedra3_english_db_file","title":"parse_sedra3_english_db_file  <code>cached</code>","text":"<pre><code>parse_sedra3_english_db_file(\n    file_name: str = \"SEDRA/tblEnglish.txt\",\n) -&gt; DataFrame\n</code></pre> <p>Import a english db file from SEDRA 3 style DB as a pandas DataFrame.</p> <p>Parameters:</p> <ul> <li> <code>file_name</code>             (<code>str</code>, default:                 <code>'SEDRA/tblEnglish.txt'</code> )         \u2013          <p>file name for the SEDRA3 style bible DB file (tblEnglish.txt)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>pandas DataFrame of the words DB table</p> </li> </ul> Source code in <code>src/abm_tools/sedra/db.py</code> <pre><code>@lru_cache(maxsize=2)\ndef parse_sedra3_english_db_file(\n    file_name: str = \"SEDRA/tblEnglish.txt\",\n) -&gt; pd.DataFrame:\n    \"\"\"Import a english db file from SEDRA 3 style DB as a pandas DataFrame.\n\n    Args:\n        file_name: file name for the SEDRA3 style bible DB file (tblEnglish.txt)\n\n    Returns:\n        pandas DataFrame of the words DB table\n    \"\"\"\n    return pd.read_csv(file_name, index_col=\"keyEnglish\")\n</code></pre>"},{"location":"reference/abm_tools/sedra/db/#abm_tools.sedra.db.parse_sedra3_lexemes_db_file","title":"parse_sedra3_lexemes_db_file  <code>cached</code>","text":"<pre><code>parse_sedra3_lexemes_db_file(\n    file_name: str = \"SEDRA/tblLexemes.txt\",\n) -&gt; DataFrame\n</code></pre> <p>Import a lexemes db file from SEDRA 3 style DB as a pandas DataFrame.</p> <p>Parameters:</p> <ul> <li> <code>file_name</code>             (<code>str</code>, default:                 <code>'SEDRA/tblLexemes.txt'</code> )         \u2013          <p>file name for the SEDRA3 style bible DB file (tblLexemes.txt)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>pandas DataFrame of the words DB table</p> </li> </ul> Source code in <code>src/abm_tools/sedra/db.py</code> <pre><code>@lru_cache(maxsize=2)\ndef parse_sedra3_lexemes_db_file(\n    file_name: str = \"SEDRA/tblLexemes.txt\",\n) -&gt; pd.DataFrame:\n    \"\"\"Import a lexemes db file from SEDRA 3 style DB as a pandas DataFrame.\n\n    Args:\n        file_name: file name for the SEDRA3 style bible DB file (tblLexemes.txt)\n\n    Returns:\n        pandas DataFrame of the words DB table\n    \"\"\"\n    return pd.read_csv(file_name, index_col=\"keyLexemes\")\n</code></pre>"},{"location":"reference/abm_tools/sedra/db/#abm_tools.sedra.db.parse_sedra3_roots_db_file","title":"parse_sedra3_roots_db_file  <code>cached</code>","text":"<pre><code>parse_sedra3_roots_db_file(\n    file_name: str = \"SEDRA/tblRoots.txt\",\n) -&gt; DataFrame\n</code></pre> <p>Import a roots db file from SEDRA 3 style DB as a pandas DataFrame.</p> <p>Parameters:</p> <ul> <li> <code>file_name</code>             (<code>str</code>, default:                 <code>'SEDRA/tblRoots.txt'</code> )         \u2013          <p>file name for the SEDRA3 style bible DB file (tblRoots.txt)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>pandas DataFrame of the words DB table</p> </li> </ul> Source code in <code>src/abm_tools/sedra/db.py</code> <pre><code>@lru_cache(maxsize=2)\ndef parse_sedra3_roots_db_file(file_name: str = \"SEDRA/tblRoots.txt\") -&gt; pd.DataFrame:\n    \"\"\"Import a roots db file from SEDRA 3 style DB as a pandas DataFrame.\n\n    Args:\n        file_name: file name for the SEDRA3 style bible DB file (tblRoots.txt)\n\n    Returns:\n        pandas DataFrame of the words DB table\n    \"\"\"\n    return pd.read_csv(file_name, index_col=\"keyRoot\")\n</code></pre>"},{"location":"reference/abm_tools/sedra/db/#abm_tools.sedra.db.parse_sedra3_words_db_file","title":"parse_sedra3_words_db_file  <code>cached</code>","text":"<pre><code>parse_sedra3_words_db_file(\n    file_name: str = \"SEDRA/tblWords.txt\",\n) -&gt; DataFrame\n</code></pre> <p>Import a words db file from SEDRA 3 style DB as a pandas DataFrame.</p> <p>Parameters:</p> <ul> <li> <code>file_name</code>             (<code>str</code>, default:                 <code>'SEDRA/tblWords.txt'</code> )         \u2013          <p>file name for the SEDRA3 style words DB file (tblWords.txt)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>pandas DataFrame of the words DB table</p> </li> </ul> Source code in <code>src/abm_tools/sedra/db.py</code> <pre><code>@lru_cache(maxsize=2)\ndef parse_sedra3_words_db_file(file_name: str = \"SEDRA/tblWords.txt\") -&gt; pd.DataFrame:\n    \"\"\"Import a words db file from SEDRA 3 style DB as a pandas DataFrame.\n\n    Args:\n        file_name: file name for the SEDRA3 style words DB file (tblWords.txt)\n\n    Returns:\n        pandas DataFrame of the words DB table\n    \"\"\"\n    return pd.read_csv(file_name, index_col=\"keyWord\")\n</code></pre>"},{"location":"reference/abm_tools/sedra/db/#abm_tools.sedra.db.sedra4_db_word_json","title":"sedra4_db_word_json","text":"<pre><code>sedra4_db_word_json(word_id: int) -&gt; dict\n</code></pre> <p>Request word lookup from SEDRA4 DB.</p> Source code in <code>src/abm_tools/sedra/db.py</code> <pre><code>def sedra4_db_word_json(word_id: int) -&gt; dict:\n    \"\"\"Request word lookup from SEDRA4 DB.\"\"\"\n    word_json_path = Path(f\"words/{word_id}.json\")\n\n    # Use cache version if it exists\n    if word_json_path.is_file():\n        with word_json_path.open(\"r\", encoding=\"utf-8\") as json_file:\n            return json.load(json_file)\n\n    word_json_path.parent.mkdir(parents=True, exist_ok=True)\n\n    json_result = requests.get(\n        f\"https://sedra.bethmardutho.org/api/word/{word_id}.json\",\n        timeout=100,\n    ).json()[0]\n\n    word_json_path.write_text(json.dumps(json_result), encoding=\"utf-8\")\n\n    return json_result\n</code></pre>"},{"location":"reference/abm_tools/templates/","title":"Index","text":""},{"location":"reference/abm_tools/templates/#abm_tools.templates","title":"templates","text":"<p>Templates for bible modules.</p>"},{"location":"reference/abm_tools/templates/html/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> html","text":""},{"location":"reference/abm_tools/templates/html/#abm_tools.templates.html","title":"html","text":"<p>Templates for HTML bible module format.</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}